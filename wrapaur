#!/usr/bin/bash

#A simple bash script pacman and cower wrapper
#Developer: William Hahn <whahn1983@gmail.com>

#set colors
blue='\e[1;34m'
white='\e[1;37m'
grey='\e[m'

#if .wrapaur folder does not exist, create it
cd $HOME/.wrapaur > /dev/null 2>&1
if [ $? -eq 1 ]; then
	mkdir $HOME/.wrapaur
	echo "wrapaur directory created at $HOME/.wrapaur"
fi

#update option selected
if [ "$1" == "-u" ]; then
	#run pacman update
	sudo pacman -Syu

	#run cower update for AUR and assign item names to downloads variable
	echo -e "${blue}:: ${white}Checking the AUR for updates...${grey}"
	downloads=$(cower -uddf -t $HOME/.wrapaur | cut -d ' ' -f 2)
	downloads=$(echo -e $downloads | tac -s " ")
	#check if updates were found and assigned to downloads variable
	if [[ -z $downloads ]]; then
		echo -e " ${grey}there is nothing to do"
	else
		#if downloads were found, echo download list and ask to install
		echo -e "${blue}:: ${white}Updates found...${grey}"
		for line in $downloads
		do
			echo -e $line
		done
		dprompt=$(echo -e "${blue}:: ${white}Proceed with installation? [Y/n] ${grey}")
		until [ "$dchoice" == "y" ] || [ "$dchoice" == "n" ] || [ "$dchoice" == "Y" ] || [ "$dchoice" == "N" ]; do
			read -p "$dprompt" dchoice
		done	
		#if chosen to install now, loop through each item in downloads variable, install and run pacman -U, then remove folder
		if [ "$dchoice" == "y" ] || [ "$dchoice" == "Y" ]; then
			for line in $downloads
			do
				cd $HOME/.wrapaur/$line
				echo -e "installing  ${line}..."
				eprompt=$(echo -e "${blue}:: ${white}Edit PKGBUILD? [Y/n] ${grey}")
				until [ "$echoice" == "y" ] || [ "$echoice" == "n" ] || [ "$echoice" == "Y" ] || [ "$echoice" == "N" ]; do
					read -p "$eprompt" echoice
				done	
				#if chosen to edit PKGBUILD open editor
				if [ "$echoice" == "y" ] || [ "$echoice" == "Y" ]; then
					$EDITOR PKGBUILD
				fi
				makepkg -si
				cd $HOME/.wrapaur
				ruprompt=$(echo -e "${blue}:: ${white}Remove source folder? [Y/n] ${grey}")
				until [ "$ruchoice" == "y" ] || [ "$ruchoice" == "n" ] || [ "$ruchoice" == "Y" ] || [ "$ruchoice" == "N" ]; do
					read -p "$ruprompt" ruchoice
				done
				if [ "$ruchoice" == "y" ] || [ "$ruchoice" == "Y" ]; then
					rm -Rf $HOME/.wrapaur/$line
				fi
				echoice="x"
				ruchoice="x"
			done
		else
			echo -e " ${grey}updates downloaded to $HOME/.wrapaur"
		fi
	fi
#search option selected
elif [ "$1" == "-s" ]; then
	#search with pacman and cower
	pacman -Ss $2
	cower -sc $2
#official install option selected
elif [ "$1" == "-i" ]; then
	#install from pacman
	sudo pacman -S ${@:2}
#remove package using pacman
elif [ "$1" == "-r" ]; then
	#remove with pacman
	sudo pacman -Rsn ${@:2}
#aur install option selected
elif [ "$1" == "-a" ]; then
	#run cower download with dependencies, loop to install all downloaded packages
	ainstalls=$(cower -ddf -t $HOME/.wrapaur ${@:2} | cut -d ' ' -f 2)
	ainstalls=$(echo -e $ainstalls | tac -s " ")
	if [[ -z $ainstalls ]]; then
		echo -e " ${grey}there is nothing to do"
	else
		#if packages were found, echo install list and ask to install
		echo -e "${blue}:: ${white}Packages found...${grey}"
		for line in $ainstalls
		do
			echo -e $line
		done
		aprompt=$(echo -e "${blue}:: ${white}Proceed with installation? [Y/n] ${grey}")
		until [ "$ichoice" == "y" ] || [ "$ichoice" == "n" ] || [ "$ichoice" == "Y" ] || [ "$ichoice" == "N" ]; do
			read -p "$aprompt" ichoice
		done	
		#if chosen to install now, loop through each item in ainstalls variable, install and run pacman -U, then remove folder
		if [ "$ichoice" == "y" ] || [ "$ichoice" == "Y" ]; then
			for line in $ainstalls
			do
				cd $HOME/.wrapaur/$line
				echo -e "installing ${line}..."
				eprompt=$(echo -e "${blue}:: ${white}Edit PKGBUILD? [Y/n] ${grey}")
				until [ "$echoice" == "y" ] || [ "$echoice" == "n" ] || [ "$echoice" == "Y" ] || [ "$echoice" == "N" ]; do
					read -p "$eprompt" echoice
				done	
				#if chosen to edit PKGBUILD open editor
				if [ "$echoice" == "y" ] || [ "$echoice" == "Y" ]; then
					$EDITOR PKGBUILD
				fi			
				makepkg -si
				cd $HOME/.wrapaur
				raprompt=$(echo -e "${blue}:: ${white}Remove source folder? [Y/n] ${grey}")
				until [ "$rachoice" == "y" ] || [ "$rachoice" == "n" ] || [ "$rachoice" == "Y" ] || [ "$rachoice" == "N" ]; do
					read -p "$raprompt" rachoice
				done
				if [ "$rachoice" == "y" ] || [ "$rachoice" == "Y" ]; then			
					rm -Rf $HOME/.wrapaur/$line
				fi
				echoice="x"
				rachoice="x"
			done	
		else
			echo -e " ${grey}updates downloaded to $HOME/.wrapaur"
		fi
	fi
#clear cache option selected
elif [ "$1" == "-c" ]; then
	#clear pacman cache and optimize pacman database
	sudo pacman -Sc
	oprompt=$(echo -e "${blue}:: ${white}Optimize Pacman Database? [Y/n] ${grey}")
	until [ "$ochoice" == "y" ] || [ "$ochoice" == "n" ] || [ "$ochoice" == "Y" ] || [ "$ochoice" == "N" ]; do
		read -p "$oprompt" ochoice
	done
	if [ "$ochoice" == "y" ] || [ "$ochoice" == "Y" ]; then
		sudo pacman-optimize
	fi
	#empty source folders from .wrapaur folder
	cprompt=$(echo -e "${blue}:: ${white}Clear contents of .wrapaur folder? [Y/n] ${grey}")
	until [ "$cchoice" == "y" ] || [ "$cchoice" == "n" ] || [ "$cchoice" == "Y" ] || [ "$cchoice" == "N" ]; do
		read -p "$cprompt" cchoice
	done
	if [ "$cchoice" == "y" ] || [ "$cchoice" == "Y" ]; then			
		rm -Rf $HOME/.wrapaur/*
		echo -e "$HOME/.wrapaur contents cleared..."
	fi
#Query Package Information
elif [ "$1" == "-q" ]; then
	pacman -Qi $2
#update pacman mirrors
elif [ "$1" == "-m" ]; then
	reflector --help > /dev/null 2>/dev/null
	if [ $? -eq 127 ]; then
		echo -e "Optional dependency not installed.  Use wrapaur -i reflector"
	else
		mprompt=$(echo -e "${blue}:: ${white}Warning: This will overwrite your pacman mirror list at /etc/pacman.d/mirrorlist.  Proceed? [Y/n] ${grey}")
		until [ "$mchoice" == "y" ] || [ "$mchoice" == "n" ] || [ "$mchoice" == "Y" ] || [ "$mchoice" == "N" ]; do
			read -p "$mprompt" mchoice
		done
		if [ "$mchoice" == "y" ] || [ "$mchoice" == "Y" ]; then			
			sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
			rcprompt=$(echo -e "${blue}:: ${white}Enter Country or All (use reflector --list-countries for acceptable entries): ${grey}")
			until [[ -n $rcchoice ]]; do
				read -p "$rcprompt" rcchoice
			done
			if [ "$rcchoice" == "All" ] || [ "$rcchoice" == "all" ] || [ "$rcchoice" == "ALL" ]; then
				sudo reflector --verbose -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist
			else
				sudo reflector --verbose --country "${rcchoice}" -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist	
			fi
			echo -e " original mirrorlist has been backed up to /etc/pacman.d/mirrorlist.backup"
		fi
	fi
#list installed packages with package count
elif [ "$1" == "-l" ]; then
	lprompt=$(echo -e "${blue}:: ${white}List All, Explicitly Installed, Dependendies, Native only, Foreign Only, or Print Package Stats? [a/e/d/n/f/s] ${grey}")
	until [ "$lchoice" == "a" ] || [ "$lchoice" == "A" ] || [ "$lchoice" == "e" ] || [ "$lchoice" == "E" ] || [ "$lchoice" == "d" ] || [ "$lchoice" == "D" ] || [ "$lchoice" == "n" ] || [ "$lchoice" == "N" ] || [ "$lchoice" == "f" ] || [ "$lchoice" == "F" ] || [ "$lchoice" == "s" ] || [ "$lchoice" == "S" ];  do
		read -p "$lprompt" lchoice
	done
	if [ "$lchoice" == "a" ] || [ "$lchoice" == "A" ]; then
		pacman -Q
		totalpkg=$(pacman -Q | wc -l)
		echo -e "Total installed packages: $totalpkg"
	elif [ "$lchoice" == "e" ] || [ "$lchoice" == "E" ]; then
		pacman -Qe
		totalpkg=$(pacman -Qe | wc -l)
		echo -e "Total explicitly installed packages: $totalpkg"
	elif [ "$lchoice" == "d" ] || [ "$lchoice" == "D" ]; then
		pacman -Qd
		totalpkg=$(pacman -Qd | wc -l)
		echo -e "Total installed as dependencies: $totalpkg"
	elif [ "$lchoice" == "n" ] || [ "$lchoice" == "N" ]; then
		pacman -Qn
		totalpkg=$(pacman -Qn | wc -l)
		echo -e "Total installed native packages: $totalpkg"
	elif [ "$lchoice" == "f" ] || [ "$lchoice" == "F" ]; then
		pacman -Qm
		totalpkg=$(pacman -Qm | wc -l)
		echo -e "Total installed foreign packages: $totalpkg"
	elif [ "$lchoice" == "s" ] || [ "$lchoice" == "S" ]; then
		totald=$(pacman -Qd | wc -l)
		totale=$(pacman -Qe | wc -l)
		totalen=$(pacman -Qen | wc -l)
		totalef=$(pacman -Qem | wc -l)
		totaldn=$(pacman -Qdn | wc -l)
		totaldf=$(pacman -Qdm | wc -l)
		totalp=$(pacman -Q | wc -l)
		echo -e " Installed Package Stats:\n     Explicitly Installed Packages: ${totale}\n          Native: ${totalen}\n          Foreign: ${totalef}\n     Packages Installed as Dependencies: ${totald}\n          Native: ${totaldn}\n          Foreign: ${totaldf}\n     Total Packages Installed: ${totalp}"
	fi
else
	echo $'Usage: wrapaur [OPTION]... [PACKAGE]...\n  -a install from aur\n  -c clean pacman cache with pacman -Sc, optimize pacman database, and clear .wrapaur folder\n  -i install from official repositories\n  -l list installed packages with package count\n  -m update pacman mirrorlist wth reflector (default options: top 200 http servers sorted by download rate)\n  -q query information on a specific package\n  -r remove a package with pacman -Rsn (for other removal options use pacman)\n  -s search official repositories and aur\n  -u update official repositories and aur'
fi
